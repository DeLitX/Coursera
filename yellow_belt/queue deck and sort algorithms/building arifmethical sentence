#include <vector>
#include <algorithm>
#include <set>
#include <iostream>
#include <string>
#include <deque>
using namespace std;

int main() {
    int n;
    cin >> n;
    deque<string> result;
    result.push_back(to_string(n));
    int t;
    cin >> t;
    int priorityLast = 2;
    for (int i = 0; i < t; i++) {
        char action;
        cin >> action;
        int number;
        cin >> number;
        result.push_front("(");
        switch (action) {
        case'+':
            result.push_back(") + " + to_string(number));
            break;
        case'-':
            result.push_back(") - " + to_string(number));
            break;
        case'*':
            result.push_back(") * " + to_string(number));
            break;
        case'/':
            result.push_back(") / " + to_string(number));
            break;
        }
        
    }
    for (const string& a : result) {
        cout << a;
    }
    return 0;
}


//
//2
//
#include <vector>
#include <algorithm>
#include <set>
#include <iostream>
#include <string>
#include <deque>
using namespace std;

int main() {
    int n;
    cin >> n;
    deque<string> result;
    result.push_back(to_string(n));
    int t;
    cin >> t;
    int priorityLast = 2;
    for (int i = 0; i < t; i++) {
        char action;
        cin >> action;
        int number;
        cin >> number;
        switch (action) {
        case '+':
            result .push_back(" + " + to_string(number));
            priorityLast = 0;
            break;
        case'-':
            result.push_back(" - " + to_string(number));
            priorityLast = 0;
            break;
        case'*':
            if (priorityLast < 1) {
                result.push_front("(");
                result.push_back(") * " + to_string(number));
            }
            else {
                result.push_back(" * " + to_string(number));
            }
            priorityLast = 1;
            break;
        case'/':
            if (priorityLast < 1) {
                result.push_front("(");
                result.push_back(") / " + to_string(number));
            }
            else {
                result.push_back(" / " + to_string(number));
            }
            priorityLast = 1;
            break;
        }
    }
    for (const string& a : result) {
        cout << a;
    }
    return 0;
}
