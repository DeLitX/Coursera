enum class QueryType {
    NewBus,
    BusesForStop,
    StopsForBus,
    AllBuses
};

struct Query {
    QueryType type;
    string bus;
    string stop;
    vector<string> stops;
};

istream& operator >> (istream& is, Query& q) {
    Query query;
    string action;
    is >> action;
    if (action == "NEW_BUS") {
        query.type = QueryType::NewBus;
        is >> query.bus;
        int temp;
        is >> temp;
        for (int i = 0; i < temp; i++) {
            string stop;
            is >> stop;
            query.stops.push_back(stop);
        }
    }
    else if (action == "BUSES_FOR_STOP") {
        query.type = QueryType::BusesForStop;
        is >> query.stop;
    }
    else if (action == "STOPS_FOR_BUS") {
        query.type = QueryType::StopsForBus;
        is >> query.bus;
    }
    else if (action == "ALL_BUSES") {
        query.type = QueryType::AllBuses;
    }
    q = query;
    return is;
}

struct BusesForStopResponse {
    const vector<string> buses;
    const string stop;
};

ostream& operator << (ostream& os, const BusesForStopResponse& r) {
    if (r.stop == "") {
        os << "No stop";
    }
    else {
        bool isFirst = true;
        for (auto i : r.buses) {
            if (isFirst) {
                os << i;
                isFirst = false;
            }
            else {
                os << " " << i;
            }
        }
    }
    return os;
}

struct StopsForBusResponse {
    const vector<pair<string, vector<string>>> stops;
    const string bus;
};

ostream& operator << (ostream& os, const StopsForBusResponse& r) {
    if (r.stops.size() == 0) {
        os << "No bus";
    }
    else {
        for (auto i : r.stops) {
            os << "Stop " << i.first << ":";
            if (i.second.size() > 1) {
                for (auto t : i.second) {
                    if (t != r.bus) {
                        os << " " << t;
                    }
                }
            }
            else {
                os << " no interchange";
            }
            os << endl;
        }
    }

    return os;
}

struct AllBusesResponse {
    map<string, vector<string>> bus_to_stops;
};

ostream& operator << (ostream& os, const AllBusesResponse& r) {
    if (r.bus_to_stops.size() == 0) {
        os << "No buses";
    }
    else {
        for (auto i : r.bus_to_stops) {
            os << "Bus " << i.first << ":";
            for (auto t : i.second) {
                os << " " << t;
            }
            os << endl;
        }
    }
    return os;
}

class BusManager {
public:
    void AddBus(const string& bus, const vector<string>& stops) {
        for (auto i : stops) {
            buses_to_stops[i].push_back(bus);
        }
        stops_to_buses[bus] = stops;
    }

    BusesForStopResponse GetBusesForStop(const string& stop) const {
        try {
            return { buses_to_stops.at(stop),stop };
        }
        catch (exception e) {
            return { {},"" };
        }
    }

    StopsForBusResponse GetStopsForBus(const string& bus) const {
        try {
            vector<pair<string, vector<string>>> temp;
            for (auto i : stops_to_buses.at(bus)) {
                temp.push_back({ i,buses_to_stops.at(i) });
            }
            return { temp,bus };
        }
        catch (exception e) {
            return { {},"" };
        }
    }

    AllBusesResponse GetAllBuses() const {
        return { stops_to_buses };
    }
private:
    map<string, vector<string>> buses_to_stops, stops_to_buses;
};


int main() {
    int query_count;
    Query q;

    cin >> query_count;

    BusManager bm;
    for (int i = 0; i < query_count; ++i) {
        cin >> q;
        switch (q.type) {
        case QueryType::NewBus:
            bm.AddBus(q.bus, q.stops);
            break;
        case QueryType::BusesForStop:
            cout << bm.GetBusesForStop(q.stop) << endl;
            break;
        case QueryType::StopsForBus:
            cout << bm.GetStopsForBus(q.bus) << endl;
            break;
        case QueryType::AllBuses:
            cout << bm.GetAllBuses() << endl;
            break;
        }
    }

    return 0;
}
