#include <vector>
#include <algorithm>
#include <set>
#include <iostream>
#include <string>
#include <deque>
#include <sstream>
#include <iomanip>
#include <cmath>
#include <memory>
using namespace std;

class Figure {
public:
    Figure(string n, double p, double a) :name(n), perimeter(p), area(a) {}
    virtual string Name() = 0;
    virtual double Perimeter() = 0;
    virtual double Area() = 0;
protected:
    const string name;
    const double perimeter;
    const double area;
};
class Triangle :public Figure {
public:
    Triangle(double a, double b, double c) :Figure("TRIANGLE",
        a + b + c,
        sqrt((a + b + c) / 2 * ((a + b + c) / 2 - a) * ((a + b + c) / 2 - b) * ((a + b + c) / 2 - c))) {
    }
    string Name() {
        return name;
    }
    double Perimeter() {
        return perimeter;
    }
    double Area() {
        return area;
    }
};
class Rect :public Figure {
public:
    Rect(double width, double height) :Figure("RECT", width * 2 + height * 2, width* height) {

    }
    string Name() {
        return name;
    }
    double Perimeter() {
        return perimeter;
    }
    double Area() {
        return area;
    }
};
class Circle :public Figure {
public:
    Circle(double r) :Figure("CIRCLE", 2 * 3.14 * r, 3.14 * r * r) {

    }
    string Name() {
        return name;
    }
    double Perimeter() {
        return perimeter;
    }
    double Area() {
        return area;
    }
};
shared_ptr<Figure> CreateFigure(istringstream& is) {
    string type;
    is >> type;
    if (type == "RECT") {
        double temp1, temp2;
        is >> temp1 >> temp2;
        return make_shared<Rect>(temp1, temp2);
    }
    else if (type == "TRIANGLE") {
        double a, b, c;
        is >> a >> b >> c;
        return make_shared<Triangle>(a, b, c);
    }
    else if (type == "CIRCLE") {
        double r;
        is >> r;
        return make_shared<Circle>(r);
    }
}
int main() {
    vector<shared_ptr<Figure>> figures;
    for (string line; getline(cin, line); ) {
        istringstream is(line);

        string command;
        is >> command;
        if (command == "ADD") {
            figures.push_back(CreateFigure(is));
        }
        else if (command == "PRINT") {
            for (const auto& current_figure : figures) {
                cout << fixed << setprecision(3)
                    << current_figure->Name() << " "
                    << current_figure->Perimeter() << " "
                    << current_figure->Area() << endl;
            }
        }
    }
    return 0;
}
